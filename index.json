[{"content":"Python Reference List List items are ordered, changeable, and allow duplicate values.\nOrdered When we say that lists are ordered, it means that the items have a defined order, and that order will not change.\nIf you add new items to a list, the new items will be placed at the end of the list.\nChangeable The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.\nAllow Duplicates Since lists are indexed, lists can have items with the same value\nList Methods Method Description append() Adds an element at the end of the list clear() Removes all the elements from the list copy() Returns a copy of the list count() Returns the number of elements with the specified value extend() Add the elements of a list (or any iterable), to the end of the current list index() Returns the index of the first element with the specified value insert() Adds an element at the specified position pop() Removes the element at the specified position remove() Removes the first item with the specified value reverse() Reverses the order of the list sort() Sorts the list Tuple Tuple items are ordered, unchangeable, and allow duplicate values.\nTuple items are indexed, the first item has index [0], the second item has index [1] etc.\nOrdered When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.\nUnchangeable Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.\nAllow Duplicates Since tuples are indexed, they can have items with the same value\nTuple Methods Method Description count() Returns the number of times a specified value occurs in a tuple index() Searches the tuple for a specified value and returns the position of where it was found Set A set is a collection which is unordered, unchangeable*, and unindexed.\nSet items are unordered, unchangeable, and do not allow duplicate values.\nUnordered Unordered means that the items in a set do not have a defined order.\nSet items can appear in a different order every time you use them, and cannot be referred to by index or key.\nUnchangeable Set items are unchangeable, meaning that we cannot change the items after the set has been created.\nOnce a set is created, you cannot change its items, but you can remove items and add new items.\nDuplicates Not Allowed Sets cannot have two items with the same value.\nSet Methods Method Description add() Adds an element to the set clear() Removes all the elements from the set copy() Returns a copy of the set difference() Returns a set containing the difference between two or more sets difference_update() Removes the items in this set that are also included in another, specified set discard() Remove the specified item intersection() Returns a set, that is the intersection of two or more sets intersection_update() Removes the items in this set that are not present in other, specified set(s) isdisjoint() Returns whether two sets have a intersection or not issubset() Returns whether another set contains this set or not issuperset() Returns whether this set contains another set or not pop() Removes an element from the set remove() Removes the specified element symmetric_difference() Returns a set with the symmetric differences of two sets symmetric_difference_update() inserts the symmetric differences from this set and another union() Return a set containing the union of sets update() Update the set with another set, or any other iterable Dictionary Dictionary items are ordered, changeable, and does not allow duplicates.\nOrdered or Unordered? As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\nUnordered means that the items does not have a defined order, you cannot refer to an item by using an index.\nChangeable Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.\nDuplicates Not Allowed Dictionaries cannot have two items with the same key.\nDictionary Methods Method Description clear() Removes all the elements from the dictionary copy() Returns a copy of the dictionary fromkeys() Returns a dictionary with the specified keys and value get() Returns the value of the specified key items() Returns a list containing a tuple for each key value pair keys() Returns a list containing the dictionary\u0026rsquo;s keys pop() Removes the element with the specified key popitem() Removes the last inserted key-value pair setdefault() Returns the value of the specified key. If the key does not exist: insert the key, with the specified value update() Updates the dictionary with the specified key-value pairs values() Returns a list of all the values in the dictionary Comparison of Data Types List Tuple Set Dict Ordered Ordered Unordered Ordered Changeable Unchangeable Unchangeable Changeable Allow duplicate Allow duplicate Not allowed Not allowed String Methods Method Description capitalize() Converts the first character to upper case casefold() Converts string into lower case center() Returns a centered string count() Returns the number of times a specified value occurs in a string encode() Returns an encoded version of the string endswith() Returns true if the string ends with the specified value expandtabs() Sets the tab size of the string find() Searches the string for a specified value and returns the position of where it was found format() Formats specified values in a string format_map() Formats specified values in a string index() Searches the string for a specified value and returns the position of where it was found isalnum() Returns True if all characters in the string are alphanumeric isalpha() Returns True if all characters in the string are in the alphabet isascii() Returns True if all characters in the string are ascii characters isdecimal() Returns True if all characters in the string are decimals isdigit() Returns True if all characters in the string are digits isidentifier() Returns True if the string is an identifier islower() Returns True if all characters in the string are lower case isnumeric() Returns True if all characters in the string are numeric isprintable() Returns True if all characters in the string are printable isspace() Returns True if all characters in the string are whitespaces istitle() Returns True if the string follows the rules of a title isupper() Returns True if all characters in the string are upper case join() Converts the elements of an iterable into a string ljust() Returns a left justified version of the string lower() Converts a string into lower case lstrip() Returns a left trim version of the string maketrans() Returns a translation table to be used in translations partition() Returns a tuple where the string is parted into three parts replace() Returns a string where a specified value is replaced with a specified value rfind() Searches the string for a specified value and returns the last position of where it was found rindex() Searches the string for a specified value and returns the last position of where it was found rjust() Returns a right justified version of the string rpartition() Returns a tuple where the string is parted into three parts rsplit() Splits the string at the specified separator, and returns a list rstrip() Returns a right trim version of the string split() Splits the string at the specified separator, and returns a list splitlines() Splits the string at line breaks and returns a list startswith() Returns true if the string starts with the specified value strip() Returns a trimmed version of the string swapcase() Swaps cases, lower case becomes upper case and vice versa title() Converts the first character of each word to upper case translate() Returns a translated string upper() Converts a string into upper case zfill() Fills the string with a specified number of 0 values at the beginning Python Try Except The try block lets you test a block of code for errors.\nThe except block lets you handle the error.\nThe else block lets you execute code when there is no error.\nThe finally block lets you execute code, regardless of the result of the try- and except blocks.\nPython Iterators An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.\nTechnically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().\nBuilt In Functions Function Description abs() Returns the absolute value of a number all() Returns True if all items in an iterable object are true any() Returns True if any item in an iterable object is true ascii() Returns a readable version of an object. Replaces none-ascii characters with escape character bin() Returns the binary version of a number bool() Returns the boolean value of the specified object bytearray() Returns an array of bytes bytes() Returns a bytes object callable() Returns True if the specified object is callable, otherwise False chr() Returns a character from the specified Unicode code. classmethod() Converts a method into a class method compile() Returns the specified source as an object, ready to be executed complex() Returns a complex number delattr() Deletes the specified attribute (property or method) from the specified object dict() Returns a dictionary (Array) dir() Returns a list of the specified object\u0026rsquo;s properties and methods divmod() Returns the quotient and the remainder when argument1 is divided by argument2 enumerate() Takes a collection (e.g. a tuple) and returns it as an enumerate object eval() Evaluates and executes an expression exec() Executes the specified code (or object) filter() Use a filter function to exclude items in an iterable object float() Returns a floating point number format() Formats a specified value frozenset() Returns a frozenset object getattr() Returns the value of the specified attribute (property or method) globals() Returns the current global symbol table as a dictionary hasattr() Returns True if the specified object has the specified attribute (property/method) hash() Returns the hash value of a specified object help() Executes the built-in help system hex() Converts a number into a hexadecimal value id() Returns the id of an object input() Allowing user input int() Returns an integer number isinstance() Returns True if a specified object is an instance of a specified object issubclass() Returns True if a specified class is a subclass of a specified object iter() Returns an iterator object len() Returns the length of an object list() Returns a list locals() Returns an updated dictionary of the current local symbol table map() Returns the specified iterator with the specified function applied to each item max() Returns the largest item in an iterable memoryview() Returns a memory view object min() Returns the smallest item in an iterable next() Returns the next item in an iterable object() Returns a new object oct() Converts a number into an octal open() Opens a file and returns a file object ord() Convert an integer representing the Unicode of the specified character pow() Returns the value of x to the power of y print() Prints to the standard output device property() Gets, sets, deletes a property range() Returns a sequence of numbers, starting from 0 and increments by 1 (by default) repr() Returns a readable version of an object reversed() Returns a reversed iterator round() Rounds a numbers set() Returns a new set object setattr() Sets an attribute (property/method) of an object slice() Returns a slice object sorted() Returns a sorted list staticmethod() Converts a method into a static method str() Returns a string object sum() Sums the items of an iterator super() Returns an object that represents the parent class tuple() Returns a tuple type() Returns the type of an object vars() Returns the __dict__ property of an object zip() Returns an iterator, from two or more iterators Datetime Formats Directive Description Example %a Weekday, short version Wed %A Weekday, full version Wednesday %w Weekday as a number 0-6, 0 is Sunday 3 %d Day of month 01-31 31 %b Month name, short version Dec %B Month name, full version December %m Month as a number 01-12 12 %y Year, short version, without century 18 %Y Year, full version 2018 %H Hour 00-23 17 %I Hour 00-12 05 %p AM/PM PM %M Minute 00-59 41 %S Second 00-59 08 %f Microsecond 000000-999999 548513 %z UTC offset +0100 %Z Timezone CST %j Day number of year 001-366 365 %U Week number of year, Sunday as the first day of week, 00-53 52 %W Week number of year, Monday as the first day of week, 00-53 52 %c Local version of date and time Mon Dec 31 17:41:00 2018 %C Century 20 %x Local version of date 12/31/18 %X Local version of time 17:41:00 %% A % character % %G ISO 8601 year 2018 %u ISO 8601 weekday (1-7) 1 %V ISO 8601 weeknumber (01-53) 01 ","permalink":"https://qubiit.github.io/blog/python-in-a-hurry/","summary":"Python Reference List List items are ordered, changeable, and allow duplicate values.\nOrdered When we say that lists are ordered, it means that the items have a defined order, and that order will not change.\nIf you add new items to a list, the new items will be placed at the end of the list.\nChangeable The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.","title":"Python In A Hurry"},{"content":" This is a trick to be root without password using Single User Mode on default FREEBSD installation. Full process was reported on FreeBSD Forum ","permalink":"https://qubiit.github.io/blog/freebsd-fun/","summary":" This is a trick to be root without password using Single User Mode on default FREEBSD installation. Full process was reported on FreeBSD Forum ","title":"FreeBSD Fun"},{"content":" Image Credit: NASA/JPL-Caltech Look again at that dot. That\u0026rsquo;s here. That\u0026rsquo;s home. That\u0026rsquo;s us. On it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives. The aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every \u0026ldquo;superstar,\u0026rdquo; every \u0026ldquo;supreme leader,\u0026rdquo; every saint and sinner in the history of our species lived there \u0026ndash; on a mote of dust suspended in a sunbeam.\nThe Earth is a very small stage in a vast cosmic arena. Think of the rivers of blood spilled by all those generals and emperors so that, in glory and triumph, they could become the momentary masters of a fraction of a dot. Think of the endless cruelties visited by the inhabitants of one corner of this pixel on the scarcely distinguishable inhabitants of some other corner, how frequent their misunderstandings, how eager they are to kill one another, how fervent their hatreds.\nOur posturings, our imagined self-importance, the delusion that we have some privileged position in the Universe, are challenged by this point of pale light. Our planet is a lonely speck in the great enveloping cosmic dark. In our obscurity, in all this vastness, there is no hint that help will come from elsewhere to save us from ourselves.\nThe Earth is the only world known so far to harbor life. There is nowhere else, at least in the near future, to which our species could migrate. Visit, yes. Settle, not yet. Like it or not, for the moment the Earth is where we make our stand.\nIt has been said that astronomy is a humbling and character-building experience. There is perhaps no better demonstration of the folly of human conceits than this distant image of our tiny world. To me, it underscores our responsibility to deal more kindly with one another, and to preserve and cherish the pale blue dot, the only home we\u0026rsquo;ve ever known.\n\u0026ndash;Carl Sagan, Pale Blue Dot, 1994 ","permalink":"https://qubiit.github.io/blog/pale-blue-dot/","summary":"Image Credit: NASA/JPL-Caltech Look again at that dot. That\u0026rsquo;s here. That\u0026rsquo;s home. That\u0026rsquo;s us. On it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives. The aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every \u0026ldquo;superstar,\u0026rdquo; every \u0026ldquo;supreme leader,\u0026rdquo; every saint and sinner in the history of our species lived there \u0026ndash; on a mote of dust suspended in a sunbeam.","title":"Pale Blue Dot"},{"content":"I am QuBit from India, exploring the possibilities of Data Science with python.\nI am interested in Data Engineering, Machine Learning.\nThank you for visiting my website.\n","permalink":"https://qubiit.github.io/about/","summary":"I am QuBit from India, exploring the possibilities of Data Science with python.\nI am interested in Data Engineering, Machine Learning.\nThank you for visiting my website.","title":"Hello, World !"}]